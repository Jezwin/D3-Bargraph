(function (d3) {
  'use strict';

  const svg = d3.select('svg');
  const height = +svg.attr('height');
  const width = +svg.attr('width');

  const render = data => {
    
    //Value accessors. Limits the specifity of code to xValue and yValue
    const xValue = d => d.population;
    const yValue = d => d.country;
    
    const margin = {top: 60, right: 40, bottom: 70, left: 180};
    const innerWidth = width - margin.left - margin.right;
    const innerHeight = height - margin.top - margin.bottom;
    
    //Maps values from domain to corresponding values in range(Data Space to Screen Space)
    const xScale = d3.scaleLinear()
    	.domain([0, d3.max(data, xValue)])
    	.range([0, innerWidth])
    	.nice(); //Smooth edging of axes
    
    //Separate the bars and determine their heights
    const yScale = d3.scaleBand()
    	.domain(data.map(yValue))
    	.range([0, innerHeight])
    	.padding(0.1);
    
    //The axes space
    const g = svg.append('g')
    	.attr('transform', 'translate('+margin.left+', '+margin.top+')');
    
    //Formatting numbers
    const xAxisTickFormat = number =>
    	d3.format('.3s')(number)
    		.replace('G', 'B');
    const xAxis =  d3.axisBottom(xScale)
    	.tickFormat(xAxisTickFormat)
    	//The vertical grid
    	.tickSize(-innerHeight);
    
    
    const yAxis = d3.axisLeft(yScale)
    	//The horizontal grid
    	.tickSize(-innerWidth);
    g.append('g')
      .call(yAxis)
    	//Remove '.tick line' to show the horizontal grid
    	.selectAll('.domain, .tick line')
    		.remove();
    
    //Call to X axis
    const xAxisG = g.append('g').call(xAxis)
    	.attr('transform', 'translate(0, '+innerHeight+')');
    
    // Remove lines and ticks(not ticks in this)
    xAxisG.select('.domain').remove();
    
    xAxisG.append('text')
    	.attr('y', 60)
    	.attr('class', 'axis-label')
    	.attr('x', innerWidth/2)
    	.attr('fill', 'black')
    	.text('Population');
    
  	g.selectAll('rect').data(data)
    	.enter().append('rect')
    	.attr('y', d => yScale(yValue(d)))
    	.attr('width', d => xScale(xValue(d)))
    	.attr('height', yScale.bandwidth());
    g.append('text')
    	.attr('class', 'title')
    	.attr('y', -10)
    	.text('The Bargraph');
  };

  d3.csv('data.csv').then(data => { 
    //Returns a promise that resolves when data is loaded
    data.forEach(d => {
    d.population = +d.population*1000;
    });
   render(data);
  });

}(d3));

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VzIjpbIi4uL2luZGV4LmpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gIHNlbGVjdCwgXG4gIGNzdiwgXG4gIHNjYWxlTGluZWFyLCBcbiAgbWF4LFxuICBzY2FsZUJhbmQsXG4gIGF4aXNMZWZ0LFxuICBheGlzQm90dG9tLFxuICBmb3JtYXRcbn0gZnJvbSAnZDMnO1xuXG5jb25zdCBzdmcgPSBzZWxlY3QoJ3N2ZycpO1xuY29uc3QgaGVpZ2h0ID0gK3N2Zy5hdHRyKCdoZWlnaHQnKTtcbmNvbnN0IHdpZHRoID0gK3N2Zy5hdHRyKCd3aWR0aCcpO1xuXG5jb25zdCByZW5kZXIgPSBkYXRhID0+IHtcbiAgXG4gIC8vVmFsdWUgYWNjZXNzb3JzLiBMaW1pdHMgdGhlIHNwZWNpZml0eSBvZiBjb2RlIHRvIHhWYWx1ZSBhbmQgeVZhbHVlXG4gIGNvbnN0IHhWYWx1ZSA9IGQgPT4gZC5wb3B1bGF0aW9uO1xuICBjb25zdCB5VmFsdWUgPSBkID0+IGQuY291bnRyeTtcbiAgXG4gIGNvbnN0IG1hcmdpbiA9IHt0b3A6IDYwLCByaWdodDogNDAsIGJvdHRvbTogNzAsIGxlZnQ6IDE4MH07XG4gIGNvbnN0IGlubmVyV2lkdGggPSB3aWR0aCAtIG1hcmdpbi5sZWZ0IC0gbWFyZ2luLnJpZ2h0O1xuICBjb25zdCBpbm5lckhlaWdodCA9IGhlaWdodCAtIG1hcmdpbi50b3AgLSBtYXJnaW4uYm90dG9tO1xuICBcbiAgLy9NYXBzIHZhbHVlcyBmcm9tIGRvbWFpbiB0byBjb3JyZXNwb25kaW5nIHZhbHVlcyBpbiByYW5nZShEYXRhIFNwYWNlIHRvIFNjcmVlbiBTcGFjZSlcbiAgY29uc3QgeFNjYWxlID0gc2NhbGVMaW5lYXIoKVxuICBcdC5kb21haW4oWzAsIG1heChkYXRhLCB4VmFsdWUpXSlcbiAgXHQucmFuZ2UoWzAsIGlubmVyV2lkdGhdKVxuICBcdC5uaWNlKCk7IC8vU21vb3RoIGVkZ2luZyBvZiBheGVzXG4gIFxuICAvL1NlcGFyYXRlIHRoZSBiYXJzIGFuZCBkZXRlcm1pbmUgdGhlaXIgaGVpZ2h0c1xuICBjb25zdCB5U2NhbGUgPSBzY2FsZUJhbmQoKVxuICBcdC5kb21haW4oZGF0YS5tYXAoeVZhbHVlKSlcbiAgXHQucmFuZ2UoWzAsIGlubmVySGVpZ2h0XSlcbiAgXHQucGFkZGluZygwLjEpO1xuICBcbiAgLy9UaGUgYXhlcyBzcGFjZVxuICBjb25zdCBnID0gc3ZnLmFwcGVuZCgnZycpXG4gIFx0LmF0dHIoJ3RyYW5zZm9ybScsICd0cmFuc2xhdGUoJyttYXJnaW4ubGVmdCsnLCAnK21hcmdpbi50b3ArJyknKTtcbiAgXG4gIC8vRm9ybWF0dGluZyBudW1iZXJzXG4gIGNvbnN0IHhBeGlzVGlja0Zvcm1hdCA9IG51bWJlciA9PlxuICBcdGZvcm1hdCgnLjNzJykobnVtYmVyKVxuICBcdFx0LnJlcGxhY2UoJ0cnLCAnQicpO1xuICBjb25zdCB4QXhpcyA9ICBheGlzQm90dG9tKHhTY2FsZSlcbiAgXHQudGlja0Zvcm1hdCh4QXhpc1RpY2tGb3JtYXQpXG4gIFx0Ly9UaGUgdmVydGljYWwgZ3JpZFxuICBcdC50aWNrU2l6ZSgtaW5uZXJIZWlnaHQpO1xuICBcbiAgXG4gIGNvbnN0IHlBeGlzID0gYXhpc0xlZnQoeVNjYWxlKVxuICBcdC8vVGhlIGhvcml6b250YWwgZ3JpZFxuICBcdC50aWNrU2l6ZSgtaW5uZXJXaWR0aCk7XG4gIGcuYXBwZW5kKCdnJylcbiAgICAuY2FsbCh5QXhpcylcbiAgXHQvL1JlbW92ZSAnLnRpY2sgbGluZScgdG8gc2hvdyB0aGUgaG9yaXpvbnRhbCBncmlkXG4gIFx0LnNlbGVjdEFsbCgnLmRvbWFpbiwgLnRpY2sgbGluZScpXG4gIFx0XHQucmVtb3ZlKCk7XG4gIFxuICAvL0NhbGwgdG8gWCBheGlzXG4gIGNvbnN0IHhBeGlzRyA9IGcuYXBwZW5kKCdnJykuY2FsbCh4QXhpcylcbiAgXHQuYXR0cigndHJhbnNmb3JtJywgJ3RyYW5zbGF0ZSgwLCAnK2lubmVySGVpZ2h0KycpJyk7XG4gIFxuICAvLyBSZW1vdmUgbGluZXMgYW5kIHRpY2tzKG5vdCB0aWNrcyBpbiB0aGlzKVxuICB4QXhpc0cuc2VsZWN0KCcuZG9tYWluJykucmVtb3ZlKCk7XG4gIFxuICB4QXhpc0cuYXBwZW5kKCd0ZXh0JylcbiAgXHQuYXR0cigneScsIDYwKVxuICBcdC5hdHRyKCdjbGFzcycsICdheGlzLWxhYmVsJylcbiAgXHQuYXR0cigneCcsIGlubmVyV2lkdGgvMilcbiAgXHQuYXR0cignZmlsbCcsICdibGFjaycpXG4gIFx0LnRleHQoJ1BvcHVsYXRpb24nKTtcbiAgXG5cdGcuc2VsZWN0QWxsKCdyZWN0JykuZGF0YShkYXRhKVxuICBcdC5lbnRlcigpLmFwcGVuZCgncmVjdCcpXG4gIFx0LmF0dHIoJ3knLCBkID0+IHlTY2FsZSh5VmFsdWUoZCkpKVxuICBcdC5hdHRyKCd3aWR0aCcsIGQgPT4geFNjYWxlKHhWYWx1ZShkKSkpXG4gIFx0LmF0dHIoJ2hlaWdodCcsIHlTY2FsZS5iYW5kd2lkdGgoKSlcbiAgXG4gIGNvbnN0IHhUaXRsZSA9IGlubmVyV2lkdGgvMjtcbiAgZy5hcHBlbmQoJ3RleHQnKVxuICBcdC5hdHRyKCdjbGFzcycsICd0aXRsZScpXG4gIFx0LmF0dHIoJ3knLCAtMTApXG4gIFx0LnRleHQoJ1RoZSBCYXJncmFwaCcpO1xufTtcblxuY3N2KCdkYXRhLmNzdicpLnRoZW4oZGF0YSA9PiB7IFxuICAvL1JldHVybnMgYSBwcm9taXNlIHRoYXQgcmVzb2x2ZXMgd2hlbiBkYXRhIGlzIGxvYWRlZFxuICBkYXRhLmZvckVhY2goZCA9PiB7XG4gIGQucG9wdWxhdGlvbiA9ICtkLnBvcHVsYXRpb24qMTAwMDtcbiAgfSk7XG4gcmVuZGVyKGRhdGEpXG59KTtcblxuIl0sIm5hbWVzIjpbInNlbGVjdCIsInNjYWxlTGluZWFyIiwibWF4Iiwic2NhbGVCYW5kIiwiZm9ybWF0IiwiYXhpc0JvdHRvbSIsImF4aXNMZWZ0IiwiY3N2Il0sIm1hcHBpbmdzIjoiOzs7RUFXQSxNQUFNLEdBQUcsR0FBR0EsU0FBTSxD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